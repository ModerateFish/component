apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

android {
    compileSdk project.ext.targetSdkVersion

    defaultConfig {
        minSdk project.ext.minSdkVersion
        targetSdk project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("build/docs/javadoc/")
    failOnError false
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    archiveClassifier = 'javadoc'
    from androidJavadoc.destinationDir
}

ext {
    GROUP_ID = project.ext.mvnGroudID
    VERSION = project.ext.versionName
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def deployPath = properties.getProperty('mvn.deployPath')
if (deployPath != null) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.GROUP_ID
                artifactId project.ARTIFACT_ID
                version project.VERSION
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact androidSourcesJar
                artifact androidJavadocJar
                pom.withXml {
                    def projectToArtifactId = [
                            'common'   : 'component',
                            'extension': 'core',
                            'framework': 'framework',
                            'widget'   : 'widget'
                    ]
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dep ->
                        if (dep.group != null && dep.name != null && dep.name != 'unspecified'
                                && dep.version != null && dep.version != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                        } else if (dep.name != null && dep.name != 'unspecified' &&
                                dep.version == null || dep.version == 'unspecified') {
                            def artifactId = projectToArtifactId[dep.name]
                            if (artifactId != null) {
                                println("pom force peoject:$dep.name to " +
                                        "$project.GROUP_ID:$artifactId:$project.VERSION")
                                // 处理生成的pom中project方式的依赖group_id和version不对
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', project.GROUP_ID)
                                dependencyNode.appendNode('artifactId', artifactId)
                                dependencyNode.appendNode('version', project.VERSION)
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url uri("file://$deployPath")
            }
        }
    }
}